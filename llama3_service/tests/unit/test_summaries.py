import pytest
from fastapi import HTTPException
from models.summaries import BookSummary
from routes import _generate_summary, get_cached_summary
from sqlalchemy import select
import httpx

@pytest.mark.asyncio
async def test_generate_summary_success(mock_llama_api):
    """Test successful summary generation."""
    content = "This is a test content for summary generation."
    summary = await _generate_summary(content)
    
    assert summary == "This is a test summary generated by the mock Llama API."
    mock_llama_api.return_value.__aenter__.return_value.post.assert_called_once()

@pytest.mark.asyncio
async def test_generate_summary_api_error(mock_llama_api):
    """Test summary generation with API error."""
    mock_llama_api.return_value.__aenter__.return_value.post.return_value.status_code = 500
    mock_llama_api.return_value.__aenter__.return_value.post.return_value.text = "API Error"
    
    with pytest.raises(HTTPException) as exc_info:
        await _generate_summary("test content")
    
    assert exc_info.value.status_code == 500
    assert "Ollama API error" in str(exc_info.value.detail)

@pytest.mark.asyncio
async def test_generate_summary_connection_error(mock_llama_api):
    """Test summary generation with connection error."""
    mock_llama_api.return_value.__aenter__.return_value.post.side_effect = httpx.RequestError("Connection failed")
    
    with pytest.raises(HTTPException) as exc_info:
        await _generate_summary("test content")
    
    assert exc_info.value.status_code == 503
    assert "Failed to connect to Ollama API" in str(exc_info.value.detail)

@pytest.mark.asyncio
async def test_get_cached_summary_exists(test_db):
    """Test getting an existing cached summary."""
    engine, async_session, init_test_db = test_db
    await init_test_db()
    
    # Create a test summary
    async with async_session() as session:
        summary = BookSummary(
            book_id=1,
            user_id=1,
            content="Test content",
            summary="Test summary"
        )
        session.add(summary)
        await session.commit()
        
        # Test getting the cached summary
        cached_summary = await get_cached_summary(session, 1, 1)
        assert cached_summary is not None
        assert cached_summary.book_id == 1
        assert cached_summary.user_id == 1
        assert cached_summary.content == "Test content"
        assert cached_summary.summary == "Test summary"

@pytest.mark.asyncio
async def test_get_cached_summary_not_exists(test_db):
    """Test getting a non-existent cached summary."""
    engine, async_session, init_test_db = test_db
    await init_test_db()
    
    async with async_session() as session:
        cached_summary = await get_cached_summary(session, 999, 999)
        assert cached_summary is None 