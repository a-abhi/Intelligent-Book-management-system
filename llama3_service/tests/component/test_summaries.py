import pytest
from fastapi.testclient import TestClient
from models.summaries import BookSummary
import json

def test_generate_summary_success(
    client: TestClient,
    mock_llama_api,
    mock_book_service,
    mock_auth,
    test_credentials
):
    """Test successful summary generation endpoint."""
    response = client.post(
        "/api/v1/summaries/generate",
        json={
            "book_id": 1,
            "content": "This is a test content for summary generation."
        },
        auth=test_credentials
    )
    
    assert response.status_code == 200
    data = response.json()
    assert "id" in data
    assert data["book_id"] == 1
    assert data["content"] == "This is a test content for summary generation."
    assert data["summary"] == "This is a test summary generated by the mock Llama API."

def test_generate_summary_book_not_found(
    client: TestClient,
    mock_llama_api,
    mock_book_service,
    mock_auth,
    test_credentials
):
    """Test summary generation for non-existent book."""
    mock_book_service.return_value.__aenter__.return_value.get.return_value.status_code = 404
    
    response = client.post(
        "/api/v1/summaries/generate",
        json={
            "book_id": 999,
            "content": "Test content"
        },
        auth=test_credentials
    )
    
    assert response.status_code == 404
    assert "Book with ID 999 not found" in response.json()["detail"]

def test_generate_summary_unauthorized(
    client: TestClient,
    mock_llama_api,
    mock_book_service
):
    """Test summary generation without authentication."""
    response = client.post(
        "/api/v1/summaries/generate",
        json={
            "book_id": 1,
            "content": "Test content"
        }
    )
    
    assert response.status_code == 401

def test_generate_review_summary_success(
    client: TestClient,
    mock_llama_api,
    mock_auth,
    test_credentials
):
    """Test successful review summary generation."""
    response = client.post(
        "/api/v1/summaries/generate-review",
        json={
            "book_id": 1,
            "content": "This is a test review content."
        },
        auth=test_credentials
    )
    
    assert response.status_code == 200
    data = response.json()
    assert data["book_id"] == 1
    assert data["summary"] == "This is a test summary generated by the mock Llama API."
    assert "content" not in data  # Content should not be returned

def test_get_summary_success(
    client: TestClient,
    mock_auth,
    test_credentials,
    test_db
):
    """Test getting an existing summary."""
    engine, async_session, init_test_db = test_db
    
    # Create a test summary
    async def create_test_summary():
        await init_test_db()
        async with async_session() as session:
            summary = BookSummary(
                book_id=1,
                user_id=1,
                content="Test content",
                summary="Test summary"
            )
            session.add(summary)
            await session.commit()
    
    import asyncio
    asyncio.run(create_test_summary())
    
    response = client.get(
        "/api/v1/summaries/1",
        auth=test_credentials
    )
    
    assert response.status_code == 200
    data = response.json()
    assert data["book_id"] == 1
    assert data["content"] == "Test content"
    assert data["summary"] == "Test summary"

def test_get_summary_not_found(
    client: TestClient,
    mock_auth,
    test_credentials
):
    """Test getting a non-existent summary."""
    response = client.get(
        "/api/v1/summaries/999",
        auth=test_credentials
    )
    
    assert response.status_code == 404
    assert "Summary not found" in response.json()["detail"] 